<!-- livebook:{"persist_outputs":true} -->

# aoc2022

## Day 1

```elixir
calories =
  "/Users/clark/code/aoc2022/inputs/1.txt"
  |> File.stream!()
  |> Enum.reduce({0, []}, fn line, {this_elf_calories, all_elf_calories} ->
    line = String.trim(line)

    if line == "" do
      {0, [this_elf_calories | all_elf_calories]}
    else
      {calories, _} = Integer.parse(line)
      {calories + this_elf_calories, all_elf_calories}
    end
  end)
  # the last 
  |> then(fn {remaining, all_elf_calories} -> [remaining | all_elf_calories] end)
  |> Enum.sort()
  |> Enum.reverse()
```

<!-- livebook:{"output":true} -->

```
[68442, 68218, 68177, 66575, 66355, 64717, 64543, 64252, 63315, 62797, 60691, 59873, 59757, 59627,
 59552, 59525, 59323, 58995, 58798, 58756, 58563, 58519, 58429, 58213, 58156, 58072, 57804, 57638,
 57629, 57570, 57541, 57333, 57174, 57053, 57034, 57028, 57023, 56891, 56831, 56790, 56492, 56414,
 56307, 56268, 56149, 56084, 55959, 55911, 55651, 55638, ...]
```

```elixir
# Star 1
[most_calories | _] = calories
68442 = most_calories
```

<!-- livebook:{"output":true} -->

```
68442
```

```elixir
# Star 2
204_837 =
  calories
  |> Enum.take(3)
  |> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
204837
```

## Day 2

```elixir
win_points = 6
draw_points = 3
loss_points = 0
rock_points = 1
paper_points = 2
scissors_points = 3
```

<!-- livebook:{"output":true} -->

```
3
```

```elixir
lines =
  "/Users/clark/code/aoc2022/inputs/2.txt"
  |> File.stream!()
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.map(fn line -> String.split(line) end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/2.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
scores =
  lines
  |> Stream.map(fn plays ->
    Enum.map(plays, fn play ->
      case play do
        play when play in ["A", "X"] -> :rock
        play when play in ["B", "Y"] -> :paper
        play when play in ["C", "Z"] -> :scissors
      end
    end)
  end)
  |> Stream.map(fn
    [:rock, :rock] -> draw_points + rock_points
    [:rock, :paper] -> win_points + paper_points
    [:rock, :scissors] -> loss_points + scissors_points
    [:paper, :rock] -> loss_points + rock_points
    [:paper, :paper] -> draw_points + paper_points
    [:paper, :scissors] -> win_points + scissors_points
    [:scissors, :rock] -> win_points + rock_points
    [:scissors, :paper] -> loss_points + paper_points
    [:scissors, :scissors] -> draw_points + scissors_points
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/2.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
# Star 1
15422 = Enum.sum(scores)
```

<!-- livebook:{"output":true} -->

```
15422
```

```elixir
scores =
  lines
  |> Stream.map(fn plays ->
    Enum.map(plays, fn play ->
      case play do
        "A" -> :rock
        "B" -> :paper
        "C" -> :scissors
        "X" -> :loss
        "Y" -> :draw
        "Z" -> :win
      end
    end)
  end)
  |> Stream.map(fn
    [:rock, :win] -> win_points + paper_points
    [:rock, :draw] -> draw_points + rock_points
    [:rock, :loss] -> loss_points + scissors_points
    [:paper, :win] -> win_points + scissors_points
    [:paper, :draw] -> draw_points + paper_points
    [:paper, :loss] -> loss_points + rock_points
    [:scissors, :win] -> win_points + rock_points
    [:scissors, :draw] -> draw_points + scissors_points
    [:scissors, :loss] -> loss_points + paper_points
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/2.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
# Star 2
15442 = Enum.sum(scores)
```

<!-- livebook:{"output":true} -->

```
15442
```

## Day 3

```elixir
lower_az =
  97..122
  |> Enum.map(fn i -> {to_string([i]), i - 96} end)
  |> Enum.into(%{})

upper_az =
  65..90
  |> Enum.map(fn i -> {to_string([i]), i - 38} end)
  |> Enum.into(%{})

priorities = Map.merge(lower_az, upper_az)
```

<!-- livebook:{"output":true} -->

```
%{
  "W" => 49,
  "X" => 50,
  "k" => 11,
  "w" => 23,
  "G" => 33,
  "D" => 30,
  "Q" => 43,
  "K" => 37,
  "F" => 32,
  "C" => 29,
  "i" => 9,
  "v" => 22,
  "q" => 17,
  "g" => 7,
  "e" => 5,
  "c" => 3,
  "T" => 46,
  "Y" => 51,
  "V" => 48,
  "l" => 12,
  "J" => 36,
  "U" => 47,
  "B" => 28,
  "z" => 26,
  "a" => 1,
  "p" => 16,
  "f" => 6,
  "h" => 8,
  "r" => 18,
  "L" => 38,
  "S" => 45,
  "O" => 41,
  "R" => 44,
  "j" => 10,
  "o" => 15,
  "H" => 34,
  "E" => 31,
  "u" => 21,
  "s" => 19,
  "n" => 14,
  "b" => 2,
  "Z" => 52,
  "N" => 40,
  "A" => 27,
  "y" => 25,
  "M" => 39,
  "t" => 20,
  "m" => 13,
  "I" => 35,
  "P" => 42,
  ...
}
```

```elixir
input = File.stream!("/Users/clark/code/aoc2022/inputs/3.txt")
```

<!-- livebook:{"output":true} -->

```
%File.Stream{
  path: "/Users/clark/code/aoc2022/inputs/3.txt",
  modes: [:raw, :read_ahead, :binary],
  line_or_bytes: :line,
  raw: true
}
```

```elixir
both =
  input
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.map(fn line ->
    length = String.length(line)
    half = (length / 2) |> Kernel.trunc()
    {left, right} = String.split_at(line, half)
    {left, right}
  end)
  |> Stream.map(fn {left, right} ->
    left = String.graphemes(left) |> MapSet.new()
    right = String.graphemes(right) |> MapSet.new()
    MapSet.intersection(left, right)
  end)
  |> Stream.map(fn set ->
    set
    |> Enum.map(fn item ->
      Map.fetch!(priorities, item)
    end)
    |> List.first()
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/3.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
# Star 1
8252 = Enum.sum(both)
```

<!-- livebook:{"output":true} -->

```
8252
```

```elixir
overlapping_three =
  input
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.chunk_every(3)
  |> Stream.map(fn chunk ->
    Enum.map(chunk, fn line ->
      line
      |> String.graphemes()
      |> MapSet.new()
    end)
  end)
  |> Stream.map(fn sets ->
    Enum.reduce(sets, fn set, acc ->
      MapSet.intersection(set, acc)
    end)
  end)
  |> Stream.map(fn set ->
    set
    |> Enum.map(fn item ->
      Map.fetch!(priorities, item)
    end)
    |> List.first()
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: #Stream<[
    enum: %File.Stream{
      path: "/Users/clark/code/aoc2022/inputs/3.txt",
      modes: [:raw, :read_ahead, :binary],
      line_or_bytes: :line,
      raw: true
    },
    funs: [#Function<48.124013645/1 in Stream.map/2>,
     #Function<3.124013645/1 in Stream.chunk_while/4>]
  ]>,
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
2828 = Enum.sum(overlapping_three)
```

<!-- livebook:{"output":true} -->

```
2828
```

## Day 4

```elixir
day4_input =
  "/Users/clark/code/aoc2022/inputs/4.txt"
  |> File.stream!()
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.map(fn line ->
    String.split(line, ",")
  end)
  |> Stream.map(fn ranges ->
    Enum.map(ranges, fn range ->
      range
      |> String.split("-")
      |> Enum.map(fn i ->
        i
        |> Integer.parse()
        |> then(fn {i, _} -> i end)
      end)
    end)
  end)

# day4_input =
#    "2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8"
#    |> String.split()
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/4.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
day4_star1 =
  day4_input
  |> Stream.map(fn [[ll, lh], [rl, rh]] ->
    cond do
      # l contained by r
      ll in rl..rh && lh in rl..rh -> 1
      # r contained by l
      rl in ll..lh && rh in ll..lh -> 1
      true -> 0
    end
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/4.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
# Star 1
305 = Enum.sum(day4_star1)
```

<!-- livebook:{"output":true} -->

```
305
```

```elixir
day4_star2 =
  day4_input
  |> Stream.map(fn [[ll, lh], [rl, rh]] ->
    cond do
      # overlaps
      lh in rl..rh -> 1
      ll in rl..rh -> 1
      rl in ll..lh -> 1
      rh in ll..lh -> 1
      true -> 0
    end
  end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/4.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>,
   #Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
# Star 2
811 = Enum.sum(day4_star2)
```

<!-- livebook:{"output":true} -->

```
811
```

## Day 5

```elixir
day5_starting_state =
  "/Users/clark/code/aoc2022/inputs/5.txt"
  |> File.stream!()
  |> Stream.map(fn line ->
    String.trim(line)
  end)
  |> Stream.take_while(fn line ->
    !String.starts_with?(line, "1")
  end)
  |> Enum.map(fn line -> String.trim(line) end)

state_len = length(day5_starting_state)

day5_instructions =
  "/Users/clark/code/aoc2022/inputs/5.txt"
  |> File.stream!()
  |> Stream.drop(state_len + 2)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/5.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<34.124013645/1 in Stream.drop/2>]
]>
```

```elixir
byte_offsets =
  1
  |> Stream.iterate(fn i -> i + 4 end)
  |> Enum.take(9)

blank_state = Enum.map(1..9, fn i -> {i, []} end) |> Enum.into(%{})

day5_state =
  day5_starting_state
  |> Enum.reduce(blank_state, fn line, acc ->
    byte_offsets
    |> Enum.with_index()
    |> Enum.reduce(acc, fn {byte_offset, i}, acc ->
      Map.update!(acc, i + 1, fn stack ->
        box = String.at(line, byte_offset)

        if box == " " || is_nil(box) do
          stack
        else
          [box | stack]
        end
      end)
    end)
  end)
  |> Enum.map(fn {i, boxes} ->
    {i, Enum.reverse(boxes)}
  end)
  |> Enum.into(%{})
```

<!-- livebook:{"output":true} -->

```
%{
  1 => ["T", "R", "G", "W", "Q", "M", "F", "P"],
  2 => ["R", "F", "H"],
  3 => ["D", "S", "H", "G", "V", "R", "Z", "P"],
  4 => ["G", "W", "F", "B", "P", "H", "Q"],
  5 => ["H", "J", "M", "S", "P"],
  6 => ["L", "P", "R", "S", "H", "T", "Z", "M"],
  7 => ["L", "M", "N", "H", "T", "P"],
  8 => ["R", "Q", "D", "F"],
  9 => ["H", "P", "L", "N", "C", "S", "D"]
}
```

```elixir
# move 3 from 8 to 9
parser = ~r/move (?<move>\d+) from (?<from>\d+) to (?<to>\d+)/

interpretation_1 =
  day5_instructions
  |> Stream.map(fn instruction_line ->
    Regex.named_captures(parser, instruction_line)
  end)
  |> Enum.reduce(day5_state, fn %{"move" => move, "from" => from, "to" => to}, state ->
    {move, _} = Integer.parse(move)
    {from, _} = Integer.parse(from)
    {to, _} = Integer.parse(to)

    Enum.reduce(1..move, state, fn _, loop_state ->
      loop_state
      |> Map.update!(to, fn to_state ->
        [top | _] = Map.fetch!(loop_state, from)
        [top | to_state]
      end)
      |> Map.update!(from, fn from_state ->
        [_ | rest] = from_state
        rest
      end)
    end)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  1 => ["T", "M", "M", "Q", "R"],
  2 => ["P", "R", "S", "H"],
  3 => ["G", "P", "C", "D", "Z", "T"],
  4 => ["V", "F"],
  5 => ["Q"],
  6 => ["P", "L", "B", "H", "S", "H", "W", "F", "M", "R", "G", "S", "M", "N", "R", "G", "S", "P",
   "H", "P"],
  7 => ["F", "F"],
  8 => ["D", "P", "Q", "D", "J", "H", "N", "T", "L", "W", "Z", "L", "H", "P", "R"],
  9 => ["H"]
}
```

```elixir
# Star 1
"TPGVQPFDH" =
  1..9
  |> Enum.map(fn i ->
    [top | _] = Map.fetch!(interpretation_1, i)
    top
  end)
  |> Enum.join()
```

<!-- livebook:{"output":true} -->

```
"TPGVQPFDH"
```

```elixir
interpretation_2 =
  day5_instructions
  |> Stream.map(fn instruction_line ->
    Regex.named_captures(parser, instruction_line)
  end)
  |> Enum.reduce(day5_state, fn %{"move" => move, "from" => from, "to" => to}, state ->
    {move, _} = Integer.parse(move)
    {from, _} = Integer.parse(from)
    {to, _} = Integer.parse(to)

    state
    |> Map.update!(to, fn to_state ->
      the_move = Map.fetch!(state, from) |> Enum.take(move)
      the_move ++ to_state
    end)
    |> Map.update!(from, fn from_state ->
      Enum.drop(from_state, move)
    end)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  1 => ["D", "P", "J", "T", "V"],
  2 => ["M", "N", "H", "M"],
  3 => ["R", "Q", "F", "P", "T", "N"],
  4 => ["D", "Q"],
  5 => ["F"],
  6 => ["R", "H", "P", "R", "F", "R", "S", "Q", "D", "P", "P", "M", "G", "L", "L", "S", "W", "W",
   "Z", "B"],
  7 => ["H", "P"],
  8 => ["H", "S", "T", "M", "S", "R", "G", "P", "H", "G", "F", "H", "C", "L", "Z"],
  9 => ["H"]
}
```

```elixir
# Star 2
"DMRDFRHHH" =
  1..9
  |> Enum.map(fn i ->
    [top | _] = Map.fetch!(interpretation_2, i)
    top
  end)
  |> Enum.join()
```

<!-- livebook:{"output":true} -->

```
"DMRDFRHHH"
```

## Day 6

```elixir
day6_input =
  "/Users/clark/code/aoc2022/inputs/6.txt"
  |> File.read!()

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
# Star 1
1816 =
  day6_input
  |> String.split("", trim: true)
  |> Stream.with_index()
  |> Stream.chunk_every(4, 1, :discard)
  |> Stream.map(fn [_, _, _, {_, last_i}] = chunk ->
    letter_set =
      chunk
      |> Enum.map(fn {letter, _} -> letter end)
      |> MapSet.new()
      |> Enum.count()

    {letter_set, last_i + 1}
  end)
  |> Stream.filter(fn {len, _i} -> len == 4 end)
  |> Stream.map(fn {_set, i} -> i end)
  |> Enum.take(1)
  |> List.first()
```

<!-- livebook:{"output":true} -->

```
1816
```

```elixir
# Star 2
2625 =
  day6_input
  |> String.split("", trim: true)
  |> Stream.with_index()
  |> Stream.chunk_every(14, 1, :discard)
  |> Stream.map(fn chunk ->
    {_, last_i} = List.last(chunk)

    letter_set =
      chunk
      |> Enum.map(fn {letter, _} -> letter end)
      |> MapSet.new()
      |> Enum.count()

    {letter_set, last_i + 1}
  end)
  |> Stream.filter(fn {len, _i} -> len == 14 end)
  |> Stream.map(fn {_set, i} -> i end)
  |> Enum.take(1)
  |> List.first()
```

<!-- livebook:{"output":true} -->

```
2625
```

## Day 7

```elixir
day7_input =
  "/Users/clark/code/aoc2022/inputs/7.txt"
  |> File.stream!()

# day7_input = "$ cd /
# $ ls
# dir a
# 14848514 b.txt
# 8504156 c.dat
# dir d
# $ cd a
# $ ls
# dir e
# 29116 f
# 2557 g
# 62596 h.lst
# $ cd e
# $ ls
# 584 i
# $ cd ..
# $ cd ..
# $ cd d
# $ ls
# 4060174 j
# 8033020 d.log
# 5626152 d.ext
# 7214296 k" |> String.split("\n")
```

<!-- livebook:{"output":true} -->

```
%File.Stream{
  path: "/Users/clark/code/aoc2022/inputs/7.txt",
  modes: [:raw, :read_ahead, :binary],
  line_or_bytes: :line,
  raw: true
}
```

```elixir
commands =
  day7_input
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.map(fn line -> String.split(line) end)
```

<!-- livebook:{"output":true} -->

```
#Stream<[
  enum: %File.Stream{
    path: "/Users/clark/code/aoc2022/inputs/7.txt",
    modes: [:raw, :read_ahead, :binary],
    line_or_bytes: :line,
    raw: true
  },
  funs: [#Function<48.124013645/1 in Stream.map/2>, #Function<48.124013645/1 in Stream.map/2>]
]>
```

```elixir
defmodule Interp do
  def traverse(lines) do
    traverse(lines, %{cwd: [], sizes: %{}})
  end

  def all_levels(dirs) do
    all_levels(dirs, [dirs])
  end

  defp all_levels([_dir | dirs], all) do
    if dirs == [] do
      all
    else
      all_levels(dirs, [dirs | all])
    end
  end

  defp traverse([], state) do
    state
  end

  defp traverse([["$", "cd", ".."] | lines], state) do
    state =
      Map.update!(state, :cwd, fn [_ | cwd] ->
        cwd
      end)

    traverse(
      lines,
      state
    )
  end

  defp traverse([["$", "cd", dir] | lines], state) do
    state =
      Map.update!(state, :cwd, fn cwd ->
        [dir | cwd]
      end)

    traverse(
      lines,
      state
    )
  end

  # unused
  defp traverse([["$", "ls"] | lines], state) do
    traverse(lines, state)
  end

  # unused
  defp traverse([["dir", _dir] | lines], state) do
    traverse(lines, state)
  end

  defp traverse([[filesize, _filename] | lines], %{cwd: cwd, sizes: sizes} = state) do
    {filesize, _} = Integer.parse(filesize)

    dirs = Interp.all_levels(cwd)

    sizes =
      Enum.reduce(dirs, sizes, fn dir, s ->
        if Map.has_key?(s, dir) do
          Map.update!(s, dir, fn dir_size -> dir_size + filesize end)
        else
          Map.put(s, dir, filesize)
        end
      end)

    state = Map.put(state, :sizes, sizes)

    traverse(lines, state)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Interp, <<70, 79, 82, 49, 0, 0, 14, ...>>, {:traverse, 2}}
```

```elixir
# Star 1
1_749_646 =
  commands
  |> Enum.to_list()
  |> Interp.traverse()
  |> Map.fetch!(:sizes)
  |> Enum.reduce(0, fn {_dir, size}, total ->
    if size <= 100_000 do
      total + size
    else
      total
    end
  end)
```

<!-- livebook:{"output":true} -->

```
1749646
```

```elixir
# Star 2
used_space =
  commands
  |> Enum.to_list()
  |> Interp.traverse()
  |> Map.fetch!(:sizes)
  |> Map.fetch!(["/"])
  |> IO.inspect(label: "used space")

unused_space =
  (70_000_000 - used_space)
  |> IO.inspect(label: "unused space")

minimum_space_to_delete =
  (30_000_000 - unused_space)
  |> IO.inspect(label: "minimum to delete")

{_dir, 1_498_966} =
  commands
  |> Enum.to_list()
  |> Interp.traverse()
  |> Map.fetch!(:sizes)
  |> Enum.filter(fn {_dir, size} -> size >= minimum_space_to_delete end)
  |> Enum.sort_by(fn {_dir, size} -> size end)
  |> List.first()
```

<!-- livebook:{"output":true} -->

```
used space: 41412830
unused space: 28587170
minimum to delete: 1412830
```

<!-- livebook:{"output":true} -->

```
{["mbsjjzft", "rzsrp", "rqtc", "btjq", "mghmb", "ddzmvh", "zjhqnlrr", "/"], 1498966}
```

## Day 8

```elixir
day8_input =
  "/Users/clark/code/aoc2022/inputs/8.txt"
  |> File.stream!()
  |> Stream.map(fn line -> String.trim(line) end)
  |> Stream.map(fn line -> String.split(line, "", trim: true) end)
  |> Stream.with_index()
  |> Stream.map(fn {row, y} ->
    row
    |> Enum.with_index()
    |> Enum.map(fn {height, x} ->
      {height, _} = Integer.parse(height)
      %{height: height, x: x, y: y}
    end)
  end)
  |> Enum.to_list()

:ok

# day8_input =
#   "30373
# 25512
# 65332
# 33549
# 35390"
#   |> String.split()
#   |> Stream.map(fn line -> String.split(line, "", trim: true) end)
#   |> Enum.with_index()
#   |> Enum.map(fn {row, ri} ->
#     row
#     |> Enum.with_index()
#     |> Enum.map(fn {n, ci} ->
#       {n, _} = Integer.parse(n)
#       {n, ci, ri}
#     end)
#   end)
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule C do
  def left(rows) do
    rows
  end

  def right(rows) do
    Enum.map(rows, fn row -> Enum.reverse(row) end)
  end

  def top(rows) do
    as_columns(rows)
  end

  def bottom(rows) do
    rows
    |> as_columns()
    |> Enum.map(fn row -> Enum.reverse(row) end)
  end

  def visibles([%{height: height} = el | _] = row) do
    visibles(row, height, MapSet.new([el]))
  end

  def visibles([], _, vis) do
    vis
  end

  # special case for 9, at which point we're done, nothing else
  # can be seen
  def visibles([%{height: 9} = el | _rest], _current_max, vis) do
    visibles([], 9, MapSet.put(vis, el))
  end

  def visibles([%{height: height} = el | rest], current_max, vis) do
    if height > current_max do
      visibles(rest, height, MapSet.put(vis, el))
    else
      visibles(rest, current_max, vis)
    end
  end

  def visibles_all(row) do
    visibles_all(row, [])
  end

  def visibles_all([], vis) do
    Enum.reverse(vis)
  end

  def visibles_all([%{height: height} = el | rest], vis) do
    number_visible =
      Enum.reduce_while(rest, 0, fn
        %{height: v}, acc when v < height -> {:cont, acc + 1}
        %{height: v}, acc when v == height -> {:halt, acc + 1}
        %{height: v}, acc when v > height -> {:halt, acc + 1}
      end)

    visibles_all(rest, [Map.put(el, :number_visible, number_visible) | vis])
  end

  def as_columns(rows) do
    [row | _] = rows

    len = Enum.count(row)

    for i <- 0..(len - 1) do
      for row <- rows do
        # lengths must all be the same
        ^len = Enum.count(row)
        Enum.at(row, i)
      end
    end
  end
end

### TEST CODE

# C.as_columns([["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]])
# c = C.as_columns(day8_input) |> IO.inspect()
# day8_input = C.as_columns(c)

# l = C.left(day8_input)
# r = C.right(day8_input)
# t = C.top(day8_input)
# b = C.bottom(day8_input)

# all_visible_trees =
#   for view <- [l, r, t, b] do
#     for row <- view do
#       C.visibles(row)
#     end
#   end

# C.visibles([{1, 0, 0}, {2, 1, 0}, {3, 2, 0}, {4, 3, 0}]) |> dbg()
# C.visibles([{2, 0, 0}, {1, 1, 0}, {3, 2, 0}, {4, 3, 0}]) |> dbg()
# C.visibles([{2, 0, 0}, {9, 1, 0}, {8, 2, 0}, {9, 3, 0}]) |> dbg()
# C.visibles_all([
#   %{height: 2, x: 0, y: 0},
#   %{height: 9, x: 1, y: 0},
#   %{height: 8, x: 2, y: 0},
#   %{height: 9, x: 3, y: 0}
# ])
# |> dbg()

# C.visibles_all([
#   %{height: 2, x: 0, y: 0},
#   %{height: 1, x: 1, y: 0},
#   %{height: 9, x: 2, y: 0},
#   %{height: 8, x: 3, y: 0},
#   %{height: 9, x: 4, y: 0}
# ])
# |> dbg()

# C.visibles_all([
#   %{height: 9, x: 0, y: 0},
#   %{height: 1, x: 1, y: 0},
#   %{height: 8, x: 2, y: 0},
#   %{height: 8, x: 3, y: 0},
#   %{height: 9, x: 4, y: 0}
# ])
# |> dbg()

# C.visibles_all([%{height: 2, x: 0, y: 0}]) |> dbg()
```

<!-- livebook:{"output":true} -->

```
{:module, C, <<70, 79, 82, 49, 0, 0, 19, ...>>, {:as_columns, 1}}
```

```elixir
# views from left, right, top, and bottom
left = C.left(day8_input)
right = C.right(day8_input)
top = C.top(day8_input)
bottom = C.bottom(day8_input)
:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
# Star 1
1672 =
  [left, right, top, bottom]
  |> Enum.flat_map(fn view ->
    Enum.map(view, fn row ->
      C.visibles(row)
    end)
  end)
  |> Enum.reduce(fn shot, acc ->
    MapSet.union(shot, acc)
  end)
  |> Enum.count()
```

<!-- livebook:{"output":true} -->

```
1672
```

```elixir
# Star 2
327_180 =
  [left, right, top, bottom]
  |> Enum.flat_map(fn view ->
    view
    |> Enum.map(fn row ->
      C.visibles_all(row)
    end)
    |> Enum.map(fn row ->
      Enum.reduce(row, %{}, fn %{x: x, y: y} = el, acc ->
        # make it look like %{[x, y] => %{...}}]
        # so we can merge left/right/top/bottom later
        Map.put(acc, [x, y], el)
      end)
    end)
  end)
  |> Enum.reduce(%{}, fn row, acc ->
    Map.merge(row, acc, fn _k,
                           %{height: height, x: x, y: y, number_visible: nv1},
                           %{number_visible: nv2} ->
      %{height: height, x: x, y: y, number_visible: nv1 * nv2}
    end)
  end)
  |> Enum.sort_by(fn {_k, %{number_visible: nv}} -> nv end)
  |> Enum.reverse()
  |> List.first()
  |> then(fn {_, %{number_visible: nv}} -> nv end)
```

<!-- livebook:{"output":true} -->

```
327180
```
